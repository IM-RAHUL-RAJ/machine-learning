# -*- coding: utf-8 -*-
"""decision_tree_salary_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I-IwwEsUE96YuFrVXcvegNovw2-E4Qnm
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset=pd.read_csv('Position_Salaries.csv')

x=dataset.iloc[:,1:-1].values
y=dataset.iloc[:,-1].values

x

y=y.reshape(len(y),1)

y

#apply feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X=StandardScaler()
sc_Y=StandardScaler()

x=sc_X.fit_transform(x)
y=sc_Y.fit_transform(y)

x

y

from sklearn.tree import DecisionTreeRegressor
regressor=DecisionTreeRegressor(random_state=0)
regressor.fit(x,y)

sc_Y.inverse_transform(regressor.predict(sc_X.transform([[9.7]])))

# visualising decision tree results
plt.scatter(sc_X.inverse_transform(x), sc_Y.inverse_transform(y), color = 'red')
plt.plot(sc_X.inverse_transform(x), sc_Y.inverse_transform(regressor.predict(x)), color = 'blue')
plt.title('Truth or Bluff (SVR)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

# Visualising the Decision Tree Regression results (higher resolution)
X_grid = np.arange(min(sc_X.inverse_transform(x)), max(sc_X.inverse_transform(x)), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(sc_X.inverse_transform(x), sc_Y.inverse_transform(y), color = 'red')
plt.plot(X_grid, sc_Y.inverse_transform(regressor.predict(sc_X.transform(X_grid))), color = 'blue')
plt.title('Truth or Bluff (SVR)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

sc_Y.inverse_transform(regressor.predict(sc_X.transform([[9.7]])))

