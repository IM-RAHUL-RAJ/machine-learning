# -*- coding: utf-8 -*-
"""Polynomial_regression_2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oVR0Wk_jG7FKJWVGk2RtX1jjFR9tKiG2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dataset=pd.read_csv('Position_Salaries.csv')
dataset

x=dataset.iloc[:,1:-1].values
y=dataset.iloc[:,-1].values

# training the linear regression model on whole dataset
# The dataset used in Polynomial regression for training is of non-linear nature. 
# It makes use of a linear regression model to fit the complicated and non-linear functions and datasets.

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x,y)

from sklearn.preprocessing import PolynomialFeatures
poly_reg=PolynomialFeatures(degree=4)
x_poly=poly_reg.fit_transform(x)
lr2=LinearRegression()
lr2.fit(x_poly,y)

# Visualising the Linear Regression results
plt.scatter(x,y,color='red')
plt.plot(x,lr.predict(x),color='blue')
plt.show()

# Visualising the Polynomial Regression results
plt.scatter(x,y,color='red')
plt.plot(x,lr2.predict(poly_reg.fit_transform(x)),color='blue')
plt.show()

# Visualising the Polynomial Regression results (for higher resolution and smoother curve)
x_grid = np.arange(min(x), max(x), 0.1)
x_grid = x_grid.reshape((len(x_grid), 1))
plt.scatter(x, y, color = 'red')
plt.plot(x_grid, lr2.predict(poly_reg.fit_transform(x_grid)), color = 'blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

# Predicting a new result with Linear Regression
lr.predict([[6.5]])

lr2.predict(poly_reg.fit_transform([[6.5]]))

